{
	"id": "bf625f51-0272-f3cc-2cff-e53bee23097a",
	"name": "Kafka Service",
	"description": "",
	"order": [
		"c38b2440-57aa-93bb-cefc-4c9664a6532b",
		"4640e19e-eed4-28ca-627a-f5160c284633",
		"94cd44b9-258c-34f8-876e-8853615c962e",
		"d0722266-2fbb-edfb-e6e9-e56fbd504ce9",
		"a37be9c2-9443-6fcc-83ba-89cf648cbed5",
		"4e6f2e7f-cfc6-2f63-1509-6a163e970f3f",
		"a0bceaf3-a04a-2500-acac-5f9abf1348b4",
		"404cacbe-8d3c-8c10-ccf0-dff194067a96",
		"e17f315c-e136-e0c2-b312-cd7064434066",
		"c88c56a5-3862-ab68-44e6-9a0fd5c5d37f",
		"54ce652e-8ac7-3797-dd0d-4e160d2dd4ad",
		"6e4f7d2e-eaff-98fa-81b4-3bd7b45ad080",
		"6d06e7d7-e666-2eb7-e7b0-0e585515313a",
		"f1bfc3a4-bebc-1733-b94e-04f2cfa6c2ff",
		"2b7f8f9d-526f-16a7-e9f8-317e62304b23",
		"f3252959-febe-9679-c722-159f5a52982d",
		"4620e81a-6d48-5ffe-854e-b563c9cac03d",
		"c2ee43d2-e6b8-9697-a654-60ca49baf240",
		"4db1b717-9700-032e-4788-babe30c1a7a4",
		"4d3524f0-5c05-356e-50a6-66f95456bfe1",
		"3a7de608-b059-6398-8936-47ce2c44725d",
		"8fc54fe2-113f-d9ec-710c-e02689ae28f9",
		"fa274f7c-d696-1fc0-e49b-b04bb23e423e",
		"a52a80a8-0578-bb8c-ddb4-d7949d7b3dde",
		"e52c4748-288c-c78f-5ec1-25026955aaec",
		"92d21cc7-beb1-df1e-74a4-83124c593ecf"
	],
	"folders": [],
	"timestamp": 1479797735351,
	"owner": "1355770",
	"public": false,
	"hasRequests": true,
	"requests": [
		{
			"id": "2b7f8f9d-526f-16a7-e9f8-317e62304b23",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "пустой zk-provider (пустой провайдер)",
			"description": "",
			"descriptionFormat": "html",
			"time": 1482912911930,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'Zk-provider' is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "3a7de608-b059-6398-8936-47ce2c44725d",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services/rest-kafka",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Body matches string\"] = responseBody.has(\"rest-kafka\");\n\ntests[\"Body matches string\"] = responseBody.has(\"string_you_want_to_search\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1482291448576,
			"name": "получить сервис по имени",
			"description": "",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"aerospike_test_provider\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "404cacbe-8d3c-8c10-ccf0-dff194067a96",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "пустой тип (пустой массив)",
			"description": "",
			"descriptionFormat": "html",
			"time": 1482912845787,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'Type' is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "4620e81a-6d48-5ffe-854e-b563c9cac03d",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "zk-provider не zookeeper",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479803644055,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\" 'Zk-provider' must be of type 'zookeeper' ('aerospike' is given instead).\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"aerospike_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "4640e19e-eed4-28ca-627a-f5160c284633",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service has incorrect name: '1rest-kafka'. Name of service must contain digits, lowercase letters or hyphens. First symbol must be a letter.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1479801923583,
			"name": "имя с цифрой",
			"description": "",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"1rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "4d3524f0-5c05-356e-50a6-66f95456bfe1",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "получить сервисы",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479803888231,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"aerospike_test_provider\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "4db1b717-9700-032e-4788-babe30c1a7a4",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "провайдер не того типа",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479803823527,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"Provider for 'KfkQ' service must be of type 'kafka' ('aerospike' is given instead).\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"aerospike_test_provider\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "4e6f2e7f-cfc6-2f63-1509-6a163e970f3f",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "пустое имя (пустой массив)",
			"description": "",
			"descriptionFormat": "html",
			"time": 1482912821844,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'Name' is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "54ce652e-8ac7-3797-dd0d-4e160d2dd4ad",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "пустой провайдер (пустой массив)",
			"description": "",
			"descriptionFormat": "html",
			"time": 1482912866163,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\" 'Provider' is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "6d06e7d7-e666-2eb7-e7b0-0e585515313a",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "пустой zk-namespace (пустой массив)",
			"description": "",
			"descriptionFormat": "html",
			"time": 1482912889282,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'Zk-namespace' is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"\"\r\n} "
		},
		{
			"id": "6e4f7d2e-eaff-98fa-81b4-3bd7b45ad080",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "пустой zk-namespace",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479803168311,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'Zk-namespace' is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\"\r\n}"
		},
		{
			"id": "8fc54fe2-113f-d9ec-710c-e02689ae28f9",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services/rest-kafka111",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "получить несуществующий сервис",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479870860658,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service 'rest-kafka111' has not been found.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "92d21cc7-beb1-df1e-74a4-83124c593ecf",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services/kafka_test_service",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "DELETE",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "удаление сервиса, который используется",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479871075161,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"Cannot delete service 'kafka_test_service'. Service is used in streams.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "94cd44b9-258c-34f8-876e-8853615c962e",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service has incorrect 'zk-namespace': '1a1'. Name must contain digits, lowercase letters or underscore. First symbol must be a letter.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1479801920695,
			"name": "zk-nzmespace с цифрой",
			"description": "",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"1a1\"\r\n}"
		},
		{
			"id": "a0bceaf3-a04a-2500-acac-5f9abf1348b4",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "пустой тип",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479802427040,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'Type' is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "a37be9c2-9443-6fcc-83ba-89cf648cbed5",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "пустое имя",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479801910944,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'Name' is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "a52a80a8-0578-bb8c-ddb4-d7949d7b3dde",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services/rest-kafka",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 404;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service 'rest-kafka' has not been found.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484625500175,
			"name": "получить удаленный сервис",
			"description": "",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"aerospike_test_provider\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "c2ee43d2-e6b8-9697-a654-60ca49baf240",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "provider не существует",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479803734159,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"Provider 'kafka-good111' does not exist.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good111\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "c38b2440-57aa-93bb-cefc-4c9664a6532b",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service 'rest-kafka' has been created.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1481607883738,
			"name": "все корректные данные",
			"description": "",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "c88c56a5-3862-ab68-44e6-9a0fd5c5d37f",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "пустой провайдер",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479802883440,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\" 'Provider' is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "d0722266-2fbb-edfb-e6e9-e56fbd504ce9",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service with name 'rest-kafka' already exists.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1479801917607,
			"name": "уже существует",
			"description": "",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "e17f315c-e136-e0c2-b312-cd7064434066",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "неизвестный тип",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479802495119,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"Unknown type 'KfkQ111' provided. Must be one of: [CassDB, ESInd, KfkQ, TstrQ, ZKCoord, ArspkDB, JDBC].\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ111\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "e52c4748-288c-c78f-5ec1-25026955aaec",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services/rest-elasticsearch",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service 'rest-kafka' has not been found.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1479885843843,
			"name": "удаление несуществующего",
			"description": "",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "f1bfc3a4-bebc-1733-b94e-04f2cfa6c2ff",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "пустой zk-provider",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479803233167,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'Zk-provider' is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "f3252959-febe-9679-c722-159f5a52982d",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "zk-provider не существует",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479803516095,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"Zookeeper provider 'zookeeper_test_provider1111' does not exist.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider1111\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "fa274f7c-d696-1fc0-e49b-b04bb23e423e",
			"headers": "",
			"url": "http://176.120.25.19:28080/v1/services/rest-kafka",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "DELETE",
			"collectionId": "bf625f51-0272-f3cc-2cff-e53bee23097a",
			"data": [],
			"dataMode": "raw",
			"name": "удаление",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479870964970,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service 'rest-kafka' has been deleted\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		}
	]
}