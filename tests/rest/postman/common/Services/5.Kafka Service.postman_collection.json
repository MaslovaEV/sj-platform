{
	"id": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
	"name": "Kafka Service",
	"description": "",
	"order": [
		"030143b7-259d-e361-ffa1-42cf85b74293",
		"625ce5ce-8c9a-0fa4-27c9-c374a9c61263",
		"c4ac77bc-7b2d-f1fc-b089-c42e8bb1ea57",
		"9d158386-0363-d254-bda7-2014432b25e1",
		"153a7fd1-f7f1-1251-620d-83944ce44ebf",
		"a2fa0a1b-ad0d-29e2-28c5-d4e4257eacec",
		"d723e47a-84f1-9a50-1292-e294edab6a90",
		"6d7ddf7c-fd60-3269-2586-5e38cb8e244b",
		"5553cde8-ee67-a123-78ac-d08207e6d3de",
		"7c2b0af3-28ad-e5c5-571e-b9eb1174bdc6",
		"04f03912-b641-c3af-da1a-6d679b419992",
		"8fddd3ac-453a-6d62-1a46-54c799cf62b1",
		"9b1e7b60-0151-8b5a-2423-64d2a3df271c",
		"384962f3-0f3e-66e5-0d2f-decbaa323885",
		"c419665f-ca8e-65b2-3343-3004310d9342",
		"81c29ea2-d24a-396a-c392-29344f8cd584",
		"8c0bce00-c1d9-6803-2a57-5ccdff153b1e",
		"051e201f-0a8d-55d7-a313-3e1958c7494d",
		"cf88956b-7f41-fb6d-ff52-a224a2a1726e",
		"c0b1e408-be10-4546-ddd0-0b51d8554ee1",
		"2eea4a50-4dcc-19aa-9cb4-fd92699ba087",
		"ade61d26-d95d-d1ed-a633-b9741c6da2b9",
		"e7892ebb-4ac1-6193-6e2e-da29f43c7170",
		"d709e67e-019e-970e-d9cd-2ab79fbcbbe3",
		"d080ea82-ac50-cd5e-7a99-e01159b879d3",
		"53788e21-e3e0-4030-4b03-96ada8a39239",
		"c3d075a3-b902-251a-4591-9c8e26b35327"
	],
	"folders": [],
	"timestamp": 1479797735351,
	"owner": 0,
	"public": false,
	"hasRequests": true,
	"requests": [
		{
			"id": "030143b7-259d-e361-ffa1-42cf85b74293",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service 'rest-kafka' has been created.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390233760,
			"name": "Service_5.1.1.Correct_data",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zkProvider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "04f03912-b641-c3af-da1a-6d679b419992",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\" 'Provider' attribute is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390581069,
			"name": "Service_5.1.6.Empty_provider",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"\",\r\n     \"zkProvider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "051e201f-0a8d-55d7-a313-3e1958c7494d",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"Provider 'kafka-good111' does not exist.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390727061,
			"name": "Service_5.1.15.Provider_doesn't_exists",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good111\",\r\n     \"zkProvider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "153a7fd1-f7f1-1251-620d-83944ce44ebf",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'Name' attribute is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390328495,
			"name": "Service_5.1.18.Empty_name(empty_string)",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zkProvider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "2eea4a50-4dcc-19aa-9cb4-fd92699ba087",
			"headers": "",
			"url": "{{address}}/v1/services/rest-kafka",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Body matches string\"] = responseBody.has(\"rest-kafka\");\n\ntests[\"Body matches string\"] = responseBody.has(\"string_you_want_to_search\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1482291448576,
			"name": "Service_5.2.1.Get_by_name",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"aerospike_test_provider\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "384962f3-0f3e-66e5-0d2f-decbaa323885",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'zkProvider' attribute is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390645348,
			"name": "Service_5.1.22.Empty_zk-provider(empty_string)",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n\r\n     \"type\": \"KfkQ\",\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "53788e21-e3e0-4030-4b03-96ada8a39239",
			"headers": "",
			"url": "{{address}}/v1/services/rest-elasticsearch",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service 'rest-kafka' has not been found.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1479885843843,
			"name": "Service_5.3.4.Delete_not_found",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "5553cde8-ee67-a123-78ac-d08207e6d3de",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"Unknown type 'KfkQ111' of service provided. Must be one of: [CassDB, ESInd, KfkQ, TstrQ, ZKCoord, ArspkDB, JDBC].\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390546789,
			"name": "Service_5.1.12.Unknown_type",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zkProvider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ111\",\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "625ce5ce-8c9a-0fa4-27c9-c374a9c61263",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service has incorrect name: '1rest-kafka'. Name of service must contain digits, lowercase letters or hyphens. First symbol must be a letter.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390268625,
			"name": "Service_5.1.2.Wrong_name",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"1rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zkProvider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "6d7ddf7c-fd60-3269-2586-5e38cb8e244b",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'Type' attribute is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390505054,
			"name": "Service_5.1.9.Empty_type",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zkProvider\": \"zookeeper_test_provider\",\r\n     \"type\": \"\",\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "7c2b0af3-28ad-e5c5-571e-b9eb1174bdc6",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\" 'Provider' attribute is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390567622,
			"name": "Service_5.1.20.Empty_provider(empty_string)",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \r\n     \"zkProvider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "81c29ea2-d24a-396a-c392-29344f8cd584",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"Zookeeper provider 'zookeeper_test_provider1111' does not exist.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390680068,
			"name": "Service_5.1.13.Zk-provider_doesn't_exists",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zkProvider\": \"zookeeper_test_provider1111\",\r\n     \"type\": \"KfkQ\",\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "8c0bce00-c1d9-6803-2a57-5ccdff153b1e",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\" 'zkProvider' must be of type: 'zookeeper' ('aerospike' is given instead).\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390716099,
			"name": "Service_5.1.14.Zk-provider_wrong_type",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zkProvider\": \"aerospike_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "8fddd3ac-453a-6d62-1a46-54c799cf62b1",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'zkNamespace' attribute is required\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390219096,
			"name": "Service_5.1.21.Empty_zk-namespace (empty_string)",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zkProvider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\"\r\n}"
		},
		{
			"id": "9b1e7b60-0151-8b5a-2423-64d2a3df271c",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'zkNamespace' attribute is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390609941,
			"name": "Service_5.1.7.Empty_zk-namespace",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zkProvider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zkNamespace\": \"\"\r\n} "
		},
		{
			"id": "9d158386-0363-d254-bda7-2014432b25e1",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service with name 'rest-kafka' already exists.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390311183,
			"name": "Service_5.1.11.Already_exists",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zkProvider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "a2fa0a1b-ad0d-29e2-28c5-d4e4257eacec",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'Name' attribute is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390342247,
			"name": "Service_5.1.5.Empty_name",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zkProvider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "ade61d26-d95d-d1ed-a633-b9741c6da2b9",
			"headers": "",
			"url": "{{address}}/v1/services/rest-kafka111",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"data": [],
			"dataMode": "raw",
			"name": "Service_5.2.4.Get_not_found",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479870860658,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service 'rest-kafka111' has not been found.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "c0b1e408-be10-4546-ddd0-0b51d8554ee1",
			"headers": "",
			"url": "{{address}}/v1/services",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"data": [],
			"dataMode": "raw",
			"name": "Service_1.1.Get_all_services",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479803888231,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"aerospike_test_provider\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "c3d075a3-b902-251a-4591-9c8e26b35327",
			"headers": "",
			"url": "{{address}}/v1/services/kafka_test_service",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "DELETE",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"data": [],
			"dataMode": "raw",
			"name": "Service_5.3.2.Delete_service_used_in_stream.",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479871075161,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"Cannot delete service 'kafka_test_service'. Service is used in streams.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "c419665f-ca8e-65b2-3343-3004310d9342",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'zkProvider' attribute is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390665893,
			"name": "Service_5.1.8.Empty_zk-provider",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zkProvider\": \"\",\r\n     \"type\": \"KfkQ\",\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "c4ac77bc-7b2d-f1fc-b089-c42e8bb1ea57",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service has incorrect 'zkNamespace': '1a1'. Name must contain digits, lowercase letters or underscore. First symbol must be a letter.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390294007,
			"name": "Service_5.1.3.Wrong_zk-namespace",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zkProvider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zkNamespace\": \"1a1\"\r\n}"
		},
		{
			"id": "cf88956b-7f41-fb6d-ff52-a224a2a1726e",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'Provider' must be of type: 'kafka' ('aerospike' is given instead).\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390773547,
			"name": "Service_5.1.16.Wrong_provider",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"aerospike_test_provider\",\r\n     \"zkProvider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "d080ea82-ac50-cd5e-7a99-e01159b879d3",
			"headers": "",
			"url": "{{address}}/v1/services/rest-kafka",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 404;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service 'rest-kafka' has not been found.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484625500175,
			"name": "Service_5.2.6.Get_deleted_service",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"aerospike_test_provider\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "d709e67e-019e-970e-d9cd-2ab79fbcbbe3",
			"headers": "",
			"url": "{{address}}/v1/services/rest-kafka",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "DELETE",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"data": [],
			"dataMode": "raw",
			"name": "Service_5.3.1.Delete",
			"description": "",
			"descriptionFormat": "html",
			"time": 1479870964970,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Body matches string\"] = responseBody.has(\"Service 'rest-kafka' has been deleted\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n     \"name\": \"rest-kafka\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zk-provider\": \"zookeeper_test_provider\",\r\n     \"type\": \"KfkQ\",\r\n     \"zk-namespace\": \"a1\"\r\n}"
		},
		{
			"id": "d723e47a-84f1-9a50-1292-e294edab6a90",
			"headers": "",
			"url": "{{address}}/v1/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Body matches string\"] = responseBody.has(\"'Type' attribute is required.\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489390459494,
			"name": "Service_5.1.19.Empty_type(empty_string)",
			"description": "",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"responses": [],
			"rawModeData": "{\r\n     \"name\": \"rest-kafka1\",\r\n     \"description\": \"example kafka provider\",\r\n     \"provider\": \"kafka-good\",\r\n     \"zkProvider\": \"zookeeper_test_provider\",\r\n\r\n     \"zkNamespace\": \"a1\"\r\n}"
		},
		{
			"id": "e7892ebb-4ac1-6193-6e2e-da29f43c7170",
			"headers": "",
			"url": "{{address}}/v1/services/rest-kafka/related",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "cb5b3706-bc35-3f1c-d7ab-ced7fc4aaf90",
			"data": [],
			"dataMode": "raw",
			"name": "Service_5.2.6.Related",
			"description": "",
			"descriptionFormat": "html",
			"time": 1489376071134,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Body matches string\"] = responseBody.has(\"streams\");\n\n\ntests[\"Body matches string\"] = responseBody.has(\"instances\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n      \"stream-type\": \"stream.kafka\",\r\n      \"name\": \"rest-kafka\",\r\n      \"description\": \"Tstream example\",\r\n      \"partitions\": 1,\r\n      \"service\": \"kafka-ps-service\",\r\n      \"force\": false,\r\n      \"replication-factor\": 1\r\n}\r\n\r\n"
		}
	]
}
